version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: km-postgres
    environment:
      POSTGRES_DB: knowledge_management
      POSTGRES_USER: km_user
      POSTGRES_PASSWORD: km_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - km-network

  neo4j:
    image: neo4j:5.15
    container_name: km-neo4j
    environment:
      NEO4J_AUTH: neo4j/km_password
      NEO4J_PLUGINS: '["apoc","graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - km-network

  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: km-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-transformers,generative-openai'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - km-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: km-elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - km-network

  minio:
    image: minio/minio:latest
    container_name: km-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - km-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: km-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - km-network

  # Application Services (will be added when containers are built)
  # These are placeholders for development
  frontend:
    build: ./frontend
    container_name: km-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - km-network
    profiles:
      - app

  backend:
    build: ./backend
    container_name: km-backend
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://km_user:km_password@postgres:5432/knowledge_management
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: km_password
      WEAVIATE_URL: http://weaviate:8080
      ELASTICSEARCH_URL: http://elasticsearch:9200
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - neo4j
      - weaviate
      - elasticsearch
      - minio
      - redis
    networks:
      - km-network
    profiles:
      - app

  ai-service:
    build: ./ai-service
    container_name: km-ai-service
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql://km_user:km_password@postgres:5432/knowledge_management
      WEAVIATE_URL: http://weaviate:8080
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: km_password
    depends_on:
      - postgres
      - weaviate
      - neo4j
    networks:
      - km-network
    profiles:
      - app
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  weaviate_data:
  elasticsearch_data:
  minio_data:
  redis_data:

networks:
  km-network:
    driver: bridge
